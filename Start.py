# –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º !!!–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û!!! –Ω—É–∂–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ Python 3.11 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.

# –ü—è—Ç—å —Å–≤–µ—á–µ–π –¥–ª—è –ø—Ä–∏–∑—ã–≤–∞ —Ñ–∏–∫—Å–∏–∫–æ–≤‚õß:           
# 1- –°–æ–∑–¥–∞—ë—Ç venv, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.
# 2- –ò—â–µ—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª Python 3.11 –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –≤ –µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏–∏.
# 3- –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ .py —Ñ–∞–π–ª–æ–≤.
# 5- –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞.
# ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
# ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£§‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä  ‚†à‚†à‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
# ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä  ‚¢∏‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
# ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä  ‚¢∏‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
# ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚°õ‚¢∂‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£§‚£º‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
# ‚†Ä‚†Ä‚†ê‚£ø‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚£á‚†Ä‚¢à‚£ô‚£∑‚£∂‚£∂‚†í‚†õ‚¢â‚£•‚°ø‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
# ‚†Ä‚†Ä‚†Ä‚£ø‚†Ä‚†Ä‚¢Ä‚£Ä‚£†‚°¥‚†º‚£ø‚°ü‚†ã‚†Å‚†Ä‚†à‚†â‚†≥‚£¶‚£æ‚°õ‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚†Ä‚†Ä‚†Ä
# ‚†Ä‚†Ä‚†Ä‚†ø‚†∂‚†ø‚†Ø‚¢≠‚£§‚£§‚£Ä‚£π‚£∑‚°Ä‚£Ä‚£Ä‚†Ä‚¢Ä‚£º‚†ü‚†ç‚†õ‚†∑‚£§‚£Ñ‚£ø‚†Ä‚†Ä‚†Ä
# ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£ø‚£æ‚°è‚¢â‚£ø‚†ø‚†õ‚†õ‚†ì‚†í‚†í‚†≤‚†ø‚†∑‚†ø‚†Ä‚†Ä‚†Ä
# ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£∑‚°ø‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
# ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†õ‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä



import subprocess                     # –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö –∫–æ–º–∞–Ω–¥
import sys                            # –î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
import os                             # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—É—Ç—è–º–∏ –∏ —Ñ–∞–π–ª–∞–º–∏
import platform                       # –î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –û–°
from pathlib import Path              # –£–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—É—Ç–µ–π

# === –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ Python 3.11 ===
def get_python311_path():
    candidates = ['python3.11', 'python3', 'python']
    for name in candidates:
        try:
            output = subprocess.check_output([name, '--version'], stderr=subprocess.STDOUT)
            if output.decode().startswith('Python 3.11'):
                return name
        except Exception:
            continue

    # –î–ª—è Windows: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    if platform.system() == 'Windows':
        possible_paths = [
            os.path.expandvars(r'%LocalAppData%\Programs\Python\Python311\python.exe'),
            r'C:\Python311\python.exe',
            r'C:\Program Files\Python311\python.exe',
        ]
        for path in possible_paths:
            if os.path.exists(path):
                try:
                    output = subprocess.check_output([path, '--version'], stderr=subprocess.STDOUT)
                    if output.decode().startswith('Python 3.11'):
                        return path
                except Exception:
                    pass
    return None

# === –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
def create_virtualenv(python_bin, venv_dir='venv'):
    if not Path(venv_dir).exists():
        print(f"[+] –°–æ–∑–¥–∞—ë–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≤ {venv_dir}")
        subprocess.check_call([python_bin, '-m', 'venv', venv_dir])
    else:
        print(f"[=] –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

# === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ===
def install_requirements(pip_path):
    print("[+] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ requirements.txt")
    subprocess.check_call([pip_path, 'install', '-r', 'requirements.txt'])

# === –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –∫ Python –∏ pip –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ ===
def get_venv_paths(venv_dir='venv'):
    if platform.system() == 'Windows':
        python_path = os.path.join(venv_dir, 'Scripts', 'python.exe')
        pip_path = os.path.join(venv_dir, 'Scripts', 'pip.exe')
    else:
        python_path = os.path.join(venv_dir, 'bin', 'python')
        pip_path = os.path.join(venv_dir, 'bin', 'pip')
    return python_path, pip_path

# === –í—ã–±–æ—Ä —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ ===
def choose_script():
    print("\n‚õß‚õß –ù–∞–π–¥–µ–Ω–Ω—ã–µ .py —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
    scripts = [f for f in os.listdir() if f.endswith('.py') and f != Path(__file__).name]
    if not scripts:
        print("‚õß –ù–µ—Ç .py —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞.")
        return None

    for i, script in enumerate(scripts, 1):
        print(f"{i}. {script}")

    while True:
        choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞: ")
        if choice.isdigit() and 1 <= int(choice) <= len(scripts):
            return scripts[int(choice) - 1]
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# === –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ ===
def main():
    python311 = get_python311_path()
    if not python311:
        print("‚õß Python 3.11 –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        sys.exit(1)

    create_virtualenv(python311)
    python_path, pip_path = get_venv_paths()

    install_requirements(pip_path)

    script = choose_script()
    if script:
        print(f"\n ü§òüèª –ó–∞–ø—É—Å–∫–∞–µ–º {script} —á–µ—Ä–µ–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ...\n")

        if not os.path.exists(python_path):
            print(f"‚õß –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª {python_path}. –ü—Ä–æ–≤–µ—Ä—å, —Å–æ–∑–¥–∞–Ω–æ –ª–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ.")
            sys.exit(1)

        subprocess.run([python_path, script])
    else:
        print("‚ò£ –°–∫—Ä–∏–ø—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω. –í—ã—Ö–æ–¥.")

# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
if __name__ == '__main__':
    main()
